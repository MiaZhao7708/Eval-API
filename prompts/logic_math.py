import re, json, copy

PROMPT_JUDGE = """\n
你精通数学&逻辑推理，现在需要你对学生回答的一些数学题&逻辑推理题进行评分，我会提供正确的参考答案给你，请你结合参考答案进行打分，打分维度包括是否回答正确、是否全面、是否有详细过程、过程是否准确。但需要注意的是我提供的参考答案只有结果，没有过程，过程的准确性需要你自己来做评判

打分标准为：
5分：回答正确，有详细过程且过程中也没有任何错误
4分：回答正确，但是没有给出详细过程，或者给出的过程不足以支撑结论导出
4分：有多种答案，但回答里只给出了一部分答案，缺少1个可能性
3分：回答正确，但是解题过程有明显错误
3分：回答错误，但解题思路正确，大部分过程是正确的
2分：回答错误，解题过程中大部分错误
1分：回答错误，过程错误或者回答内容与题目完全不相关

你需要输出的内容：你需要输出分数、扣分原因、是否可用
只要不是5分的都需要给出具体的扣分原因，5分的扣分原因输出“无”
原因要从正确性、缺少过程、过程错误等维度进行说明，重点指出明显错误的点。
可用性定义：4-5分定义为可用；1-3分定义为不可用

输出的格式（请你严格按照以下格式输出）：
 【可用性】：
 【分数】：
 【扣分原因】：

-------------------------------------------------------------------------------- 
以下是一个示例：
具体问题为：写出三个连续的数字，它们的和等于24
正确答案参考为：7、8、9
学生回答：这三个数字是7、8、9。

输出内容：
 【可用性】：可用
 【分数】：4
 【扣分原因】：回答正确，但是没有给出解题过程

--------------------------------------------------------------------------------
需要你做评分的是以下内容：
具体问题为：{prompt}
正确答案参考为：{label}
学生回答：{response}
"""

PROMPT_CHECK = """\
你精通数学&逻辑推理，现在有3个专家对学生回答的一些数学题&逻辑推理题分别进行了评分，我希望你能综合这3位专家的打分结果跟打分原因再进行最终的打分

打分维度包括是否回答正确、是否全面、是否有详细过程、过程是否准确。我会提供正确的参考答案给你，但需要注意的是我提供的参考答案只有结果，没有过程，过程的准确性需要你自己来做评判

打分标准为：
5分：回答正确，有详细过程且过程中也没有任何错误
4分：回答正确，但是没有给出详细过程，或者给出的过程不足以支撑结论导出
4分：有多种答案，但回答里只给出了一部分答案，缺少1个可能性
3分：回答正确，但是解题过程有明显错误
3分：回答错误，但解题思路正确，大部分过程是正确的
2分：回答错误，解题过程中大部分错误
1分：回答错误，过程错误或者回答内容与题目完全不相关

你需要输出的内容：你需要输出分数、扣分原因、是否可用
只要不是5分的都需要给出具体的扣分原因，5分的扣分原因输出“无”
原因要从正确性、缺少过程、过程错误等维度进行说明，重点指出明显错误的点。
可用性定义：4-5分定义为可用；1-3分定义为不可用

输出的格式（请你严格按照以下格式输出）：
 【可用性】：
 【分数】：
 【扣分原因】：
--------------------------------------------------------------------------------- 

需要你做评分的是以下内容：
具体问题为：{prompt}
正确答案参考为：{label}
学生回答：{response}

{expert_num}个专家的打分结果分别为：
{experts}
"""

def parse(info_dict, expert):
    if expert:
        try:
            keys = ('可用性', '分数', '扣分原因')
            expert = keys[0] + expert.split(keys[0], 1)[1].strip()
            parts = expert.split('\n', 2)
            assert len(keys) == len(parts)
            data = {}
            for key, part in zip(keys, parts):
                positions = []
                for sep in (':', '：'):
                    pos = part.find(sep)
                    if pos > 0:
                        positions.append((pos, sep))
                sep = sorted(positions)[0][1]
                item, content = part.split(sep, 1)
                assert key in item
                if key == '分数':
                    data[key] = int(re.findall('(\d+)?', content)[0])
                else:
                    data[key] = content.strip()
            return data
        except:
            pass